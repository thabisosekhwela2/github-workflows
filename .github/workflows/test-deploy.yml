name: Test Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - sit
          - uat
          - prod
      tenant:
        description: 'Tenant identifier'
        required: true
        type: string
      test_mode:
        description: 'Test mode (simulate deployment states)'
        required: true
        type: choice
        options:
          - all_success
          - dev_fail
          - sit_fail
          - uat_fail
          - no_deployments
      version:
        description: 'Version to test (e.g., v1.2.3)'
        required: true
        type: string
        default: 'v1.2.3'

jobs:
  test-deploy-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify and extract version from Git ref
        uses: standardbank-cibtps/dip-platform-gh-workflows/actions/verify-version@main
        id: git_ref

      - name: Test deployment validation logic
        run: |
          set -e
          
          # Define the list of environments
          ALL_ENVIRONMENTS=("dev" "sit" "uat" "prod")
          TARGET_ENVIRONMENT="${{ inputs.environment }}"
          TENANT="${{ inputs.tenant }}"
          TEST_MODE="${{ inputs.test_mode }}"
          VERSION_SHA="${{ github.sha }}"
          VERSION="${{ inputs.version }}"
          
          echo "=== TESTING DEPLOY WORKFLOW VALIDATION LOGIC ==="
          echo "Target environment: $TARGET_ENVIRONMENT"
          echo "Tenant: $TENANT"
          echo "Test mode: $TEST_MODE"
          echo "Version: $VERSION"
          echo "Version SHA: $VERSION_SHA"
          echo ""
          sleep 2
          
          echo "STEP 1: Setting up environment validation logic..."
          sleep 2
          echo "   Default environment sequence: ${ALL_ENVIRONMENTS[*]}"
          sleep 2
          
          echo ""
          echo "STEP 2: Checking tenant-specific rules..."
          sleep 2
          
          # Skip 'sit' environment if tenant is 'mig'
          if [[ "$TENANT" == "mig" ]]; then
            echo "   Tenant is '$TENANT' - checking if it matches 'mig'..."
            sleep 2
            echo "   MATCH FOUND! Tenant '$TENANT' equals 'mig'"
            sleep 2
            echo "   Skipping 'sit' environment validation for 'mig' tenant"
            sleep 2
            # Remove 'sit' from the environments array for 'mig' tenant
            ALL_ENVIRONMENTS=("dev" "uat" "prod")
            echo "   Updated environment sequence: ${ALL_ENVIRONMENTS[*]}"
            sleep 2
          else
            echo "   Tenant is '$TENANT' - checking if it matches 'mig'..."
            sleep 2
            echo "   NO MATCH! Tenant '$TENANT' does not equal 'mig'"
            sleep 2
            echo "   Keeping all environments including 'sit'"
            sleep 2
            echo "   Environment sequence remains: ${ALL_ENVIRONMENTS[*]}"
            sleep 2
          fi
          echo ""
          sleep 2
          
          echo "STEP 3: Setting up version analysis..."
          sleep 2
          echo "   Version to be deployed: $VERSION"
          sleep 2
          
          # Split the version into MAJOR, MINOR, and PATCH components
          IFS='.' read -r -a VERSION_PARTS <<< "${VERSION//v/}"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          echo "   Version components: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          sleep 2
          
          if (( PATCH == 0 )); then
            echo "   This is a BASE VERSION (PATCH=0) - checking exact version match"
            sleep 2
          else
            echo "   This is a HOTFIX VERSION (PATCH>0) - checking MAJOR.MINOR.* pattern"
            sleep 2
          fi
          echo ""
          
          # Function to simulate deployment check (replaces real API calls)
          simulate_deployment_check() {
            local env=$1
            local ref_pattern=$2
            local test_mode=$3
            
            echo "STEP 4: Checking deployments in $env..."
            sleep 2
            echo "   Reference pattern: $ref_pattern"
            sleep 2
            
            case $test_mode in
              "all_success")
                echo "   Simulating: All deployments are successful"
                sleep 2
                echo "   Found successful deployment with ID 12345 in $env"
                sleep 2
                return 0
                ;;
              "dev_fail")
                echo "   Simulating: Dev environment deployment failed"
                sleep 2
                if [[ "$env" == "dev" ]]; then
                  echo "   No successful deployments matching pattern '$ref_pattern' found in $env"
                  sleep 2
                  return 1
                else
                  echo "   Found successful deployment with ID 12345 in $env"
                  sleep 2
                  return 0
                fi
                ;;
              "sit_fail")
                echo "   Simulating: Sit environment deployment failed"
                sleep 2
                if [[ "$env" == "sit" ]]; then
                  echo "   No successful deployments matching pattern '$ref_pattern' found in $env"
                  sleep 2
                  return 1
                else
                  echo "   Found successful deployment with ID 12345 in $env"
                  sleep 2
                  return 0
                fi
                ;;
              "uat_fail")
                echo "   Simulating: UAT environment deployment failed"
                sleep 2
                if [[ "$env" == "uat" ]]; then
                  echo "   No successful deployments matching pattern '$ref_pattern' found in $env"
                  sleep 2
                  return 1
                else
                  echo "   Found successful deployment with ID 12345 in $env"
                  sleep 2
                  return 0
                fi
                ;;
              "no_deployments")
                echo "   Simulating: No deployments found in any environment"
                sleep 2
                echo "   No deployments matching pattern '$ref_pattern' found in $env"
                sleep 2
                return 1
                ;;
            esac
          }
          
          echo "STEP 5: Starting environment validation loop..."
          sleep 2
          echo "   Target environment: $TARGET_ENVIRONMENT"
          sleep 2
          echo "   Environments to check: ${ALL_ENVIRONMENTS[*]}"
          sleep 2
          echo ""
          
          # Loop through environments prior to the target environment
          echo "STEP 6: Validating each environment in sequence..."
          sleep 2
          for ENV in "${ALL_ENVIRONMENTS[@]}"; do
            echo ""
            echo "   Processing environment: $ENV"
            sleep 2
            
            if [[ "$ENV" == "$TARGET_ENVIRONMENT" ]]; then
              echo "   REACHED TARGET! Environment '$ENV' equals target '$TARGET_ENVIRONMENT'"
              sleep 2
              echo "   Stopping validation - no need to check target environment"
              sleep 2
              break
            fi

            echo "   Environment '$ENV' comes before target '$TARGET_ENVIRONMENT'"
            sleep 2
            echo "   Must validate successful deployment in '$ENV' before proceeding"
            sleep 2
            
            if (( PATCH == 0 )); then
              # For base versions, check if the exact version has been deployed successfully
              ESCAPED_VERSION="${VERSION//./[.]}"  # Replace '.' with '[.]' for regex
              REF_PATTERN="^$ESCAPED_VERSION$"
              echo "   Using exact version pattern: $REF_PATTERN"
              sleep 2
            else
              # For hotfix versions, check if any version within the same MAJOR.MINOR has been deployed successfully
              REF_PATTERN="^v$MAJOR[.]$MINOR[.]"  # Matches any version starting with 'vMAJOR.MINOR.'
              echo "   Using MAJOR.MINOR pattern: $REF_PATTERN"
              sleep 2
            fi
            
            if ! simulate_deployment_check "$ENV" "$REF_PATTERN" "$TEST_MODE"; then
              echo ""
              echo "STEP 7: VALIDATION FAILED!"
              sleep 2
              echo "   Deployment check failed for environment $ENV"
              sleep 2
              echo "   Cannot proceed to target environment '$TARGET_ENVIRONMENT'"
              sleep 2
              echo "   Validation failed - deployment cannot proceed"
              sleep 2
              exit 1
            fi
            echo "   Environment '$ENV' validation passed"
            sleep 2
          done
          
          echo ""
          echo "STEP 7: VALIDATION SUCCESS!"
          sleep 2
          echo "   All required environment checks passed"
          sleep 2
          echo "   Deployment can proceed to $TARGET_ENVIRONMENT!"
          sleep 2
          echo ""

      - name: Test deployment step
        run: |
          echo "STEP 8: SIMULATING DEPLOYMENT STEP"
          sleep 2
          echo "   Deploying to ${{ inputs.environment }}"
          sleep 2
          echo "   Tenant: ${{ inputs.tenant }}"
          sleep 2
          echo "   Version: ${{ inputs.version }}"
          sleep 2
          echo "   Deployment completed successfully"
          sleep 2
          
          echo ""
          echo "FINAL SUMMARY:"
          sleep 2
          echo "   Tenant: ${{ inputs.tenant }}"
          sleep 2
          echo "   Target: ${{ inputs.environment }}"
          sleep 2
          echo "   Version: ${{ inputs.version }}"
          sleep 2
          echo "   Test mode: ${{ inputs.test_mode }}"
          sleep 2
          
          if [[ "${{ inputs.tenant }}" == "mig" ]]; then
            echo "   SIT environment was skipped for 'mig' tenant"
            sleep 2
            echo "   This means 'mig' tenant can deploy: dev -> uat -> prod (skipping sit)"
            sleep 2
          else
            echo "   This means '${{ inputs.tenant }}' tenant follows normal flow: dev -> sit -> uat -> prod"
            sleep 2
          fi
          
          echo ""
          echo "Test completed successfully!" 